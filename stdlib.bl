fun putd d do
    var putd_buf = buffer(32)
    store8(putd_buf+31, 0x0A)
    var putd_cnt = 1;
    if d != 0 then
        var putd_is_neg = d < 0;
        if putd_is_neg then d = d * -1; end

        while d > 0 do
            store8(putd_buf+(31-putd_cnt), 0x30 + (d % 10))
            d = d / 10
            putd_cnt = putd_cnt + 1
        end

        if putd_is_neg then store8(putd_buf+(31-putd_cnt), '-'); putd_cnt = putd_cnt + 1; end
    else
        putd_cnt = 2;
        store8(putd_buf+30, 0x30)
    end

    syscall(0x2000004, 1, putd_buf + (32 - putd_cnt), putd_cnt)
end

fun putu d do
    var buf = buffer(32)
    store8(buf+31, 0x0A)
    var cnt = 1;
    if d != 0 then
        while d > 0 do
            store8(buf+(31-cnt), 0x30 + (d % 10))
            d = d / 10
            cnt = cnt + 1
        end
    else
        cnt = 2;
        store8(buf+30, 0x30)
    end

    syscall(0x2000004, 1, buf + (32 - cnt), cnt)
end

fun puth h do
    var buf = buffer(32)
    var hex = "0123456789ABCDEF"
    store8(buf+31, 0x0A)
    var cnt = 1;
    if h != 0 then

        while h > 0 do
            var ch = load8(hex + (h % 16))
            store8(buf+(31-cnt), ch)
            h = h / 16
            cnt = cnt + 1
        end
    else
        cnt = 2;
        store8(buf+30, 0x30)
    end

    store8(buf+(31-cnt), 'x')
    store8(buf+(30-cnt), '0')
    cnt = cnt + 2

    syscall(0x2000004, 1, buf + (32 - cnt), cnt+1)
end

fun strlen s do
    var cnt = 0;
    var ch = load8(s)
    while ch != 0 do
        cnt = cnt + 1
        ch = load8(s+cnt)
    end
    return cnt
end

fun memset val ptr len do
    var i = 0
    while i < len do
        store8(ptr, val)
        ptr = ptr + 1
    end
end

const STDOUT_FILENO = 1;
const STDIN_FILENO = 1;
const STDERR_FILENO = 2;

fun puts s do
    syscall(0x2000004, STDOUT_FILENO, s, strlen(s))
end

fun err_puts s do
    syscall(0x2000004, STDERR_FILENO, s, strlen(s))
end

fun putc c do
    var cbuf = buffer(1)
    store8(cbuf, c)
    syscall(0x2000004, STDOUT_FILENO, cbuf, 1)
end

const SYSCALL_EXIT = 0x2000001

const SYSCALL_READ = 0x2000003;
const SYSCALL_WRITE = 0x2000004;

const SYSCALL_OPEN = 0x2000005;
const SYSCALL_CLOSE = 0x2000006;

const SYSCALL_LSEEK = 0x20000C7;

const SYSCALL_SOCKET = 0x2000000 + 97;
const SYSCALL_CONNECT = 0x2000000 + 98;
const SYSCALL_BIND = 0x2000000 + 104;
const SYSCALL_LISTEN = 0x2000000 + 106;
const SYSCALL_ACCEPT = 0x2000000 + 30;

const O_RDONLY = 0x0000;
const O_WRONLY = 0x0001;
const O_RDWR   = 0x0002;

const O_APPEND = 0x0008;

const O_CREAT = 0x0200;
const O_TRUNC = 0x0400;
const O_EXCL  = 0x0800;

const S_IRWXU = 448; // 700 octal | RWX mask for owner
const S_IRUSR = 256; // 400 octal | R for owner
const S_IWUSR = 128; // 200 octal | W for owner
const S_IXUSR = 64;  // 100 octal | X for owner

const S_IRWXG = 56; // 70 octal   | RWX mask for group
const S_IRGRP = 32; // 40 octal   | R for group
const S_IWGRP = 16; // 20 octal   | W for group
const S_IXGRP = 8;  // 10 octal   | X for group

const S_IRWXO = 7; // 70 octal    | RWX mask for other
const S_IROTH = 4; // 40 octal    | R for other
const S_IWOTH = 2; // 20 octal    | W for other
const S_IXOTH = 1; // 10 octal    | X for other

fun exit i do
    syscall(SYSCALL_EXIT, i)
end

fun open filepath mode flags do
    return syscall(SYSCALL_OPEN, filepath, mode, flags)
end

fun close fd do
    return syscall(SYSCALL_CLOSE, fd)
end

fun read fd buf num_bytes do
    return syscall(SYSCALL_READ, fd, buf, num_bytes)
end

fun write fd buf num_bytes do
    return syscall(SYSCALL_WRITE, fd, buf, num_bytes)
end

const SEEK_SET = 0;
const SEEK_CUR = 1;
const SEEK_END = 2;

fun seek fd offs whence do
    return syscall(SYSCALL_LSEEK, fd, offs, whence)
end

fun tell fd do
    return syscall(SYSCALL_LSEEK, fd, 0, SEEK_CUR)
end


// given a, a ptr to a null-terminated string, we return the unsigned integer representation of that string
fun atoi a do
    var cnt = 0;
    var i = 0;
    var ch = load8(a)
    while ch != 0 do
        i = i * 10
        i = i + (ch - '0')
        cnt = cnt + 1
        ch = load8(a+cnt)
    end
    return i
end

fun read_until fd delim buf buflen do
    var b_read = read(fd, buf, buflen)
    var i = 0
    while i < b_read do
        if load8(buf+i) == delim then
            store8(buf+i, 0)
            //putd(i - b_read)
            seek(fd, i - b_read + 1, SEEK_CUR)
            return i
        end
        i = i + 1
    end
    return b_read
end

// Sockets

const AF_INET = 2
const SOCK_STREAM = 1

fun socket domain typ protocol do
    return syscall(SYSCALL_SOCKET, domain, typ, protocol)
end

fun connect s name namelen do
    return syscall(SYSCALL_CONNECT, s, name, namelen)
end

fun listen s backlog do
    return syscall(SYSCALL_LISTEN, s, backlog)
end

fun bind s name namelen do
    return syscall(SYSCALL_BIND, s, name, namelen)
end

fun accept s name namelen do
    return syscall(SYSCALL_ACCEPT, s, name, namelen)
end